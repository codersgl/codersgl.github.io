<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>逆矩阵</title>
      <link href="/2024/04/27/%E9%80%86%E7%9F%A9%E9%98%B5/"/>
      <url>/2024/04/27/%E9%80%86%E7%9F%A9%E9%98%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="逆矩阵"><a href="#逆矩阵" class="headerlink" title="逆矩阵"></a>逆矩阵</h1><p><img src="https://sfile.chatglm.cn/chatglm4/159c7294-47f5-45e5-9ab3-f2931cc6dccf.png?image_process=format,webp"></p><hr><h2 id="啥是逆矩阵？"><a href="#啥是逆矩阵？" class="headerlink" title="啥是逆矩阵？"></a>啥是逆矩阵？</h2><p><img src="https://sfile.chatglm.cn/chatglm4/ec8d7a8d-47fa-4e6c-a67f-a5d7ce5bcc28.png?image_process=format,webp"></p><p><img src="https://sfile.chatglm.cn/chatglm4/e4723ee7-073d-4487-bb6f-669699db7c0e.png?image_process=format,webp"></p><h2 id="逆矩阵咋求？"><a href="#逆矩阵咋求？" class="headerlink" title="逆矩阵咋求？"></a>逆矩阵咋求？</h2><h3 id="具体矩阵的逆矩阵的求法"><a href="#具体矩阵的逆矩阵的求法" class="headerlink" title="具体矩阵的逆矩阵的求法"></a>具体矩阵的逆矩阵的求法</h3><p><img src="https://sfile.chatglm.cn/chatglm4/ba9eb4ff-be59-41a9-804c-1b6d74df88bc.png?image_process=format,webp"></p><p><img src="https://sfile.chatglm.cn/chatglm4/a9f85afe-e205-4667-bbd7-f57256461778.png?image_process=format,webp"></p><h3 id="抽象矩阵的逆矩阵的求法"><a href="#抽象矩阵的逆矩阵的求法" class="headerlink" title="抽象矩阵的逆矩阵的求法"></a>抽象矩阵的逆矩阵的求法</h3><p><img src="https://sfile.chatglm.cn/chatglm4/7f6a49e6-b0f7-4eef-9f9b-8977b2380ce3.png?image_process=format,webp"></p><p><img src="https://sfile.chatglm.cn/chatglm4/bc00152a-e748-4292-9d84-d67a01e3eabc.png?image_process=format,webp"></p><h2 id="矩阵方程—先判断可逆"><a href="#矩阵方程—先判断可逆" class="headerlink" title="矩阵方程—先判断可逆"></a>矩阵方程—先判断可逆</h2><p><img src="https://sfile.chatglm.cn/chatglm4/6f6eba48-037a-4ce1-90de-c3d9701eadef.png?image_process=format,webp"></p><hr><p><img src="https://sfile.chatglm.cn/chatglm4/3045e34e-47a9-40db-8731-40c3e213ac59.png?image_process=format,webp"></p>]]></content>
      
      
      <categories>
          
          <category> 线性代数 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 矩阵 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>矩阵及其运算</title>
      <link href="/2024/04/27/%E7%9F%A9%E9%98%B5%E5%8F%8A%E5%85%B6%E8%BF%90%E7%AE%97/"/>
      <url>/2024/04/27/%E7%9F%A9%E9%98%B5%E5%8F%8A%E5%85%B6%E8%BF%90%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<h1 id="矩阵及其运算"><a href="#矩阵及其运算" class="headerlink" title="矩阵及其运算"></a>矩阵及其运算</h1><p><img src="https://sfile.chatglm.cn/chatglm4/80215fef-cd59-4974-99f7-a98b1a722cd8.png?image_process=format,webp"></p><hr><h2 id="矩阵是个啥？"><a href="#矩阵是个啥？" class="headerlink" title="矩阵是个啥？"></a>矩阵是个啥？</h2><p><img src="https://sfile.chatglm.cn/chatglm4/85eb4cd7-131a-465c-a7d4-e5d2780c43e9.png?image_process=format,webp"></p><h2 id="矩阵与行列式的关系"><a href="#矩阵与行列式的关系" class="headerlink" title="矩阵与行列式的关系"></a>矩阵与行列式的关系</h2><p><img src="https://sfile.chatglm.cn/chatglm4/7b922d5c-d842-42b7-b9b7-1c87bce05ff7.png?image_process=format,webp"></p><h2 id="矩阵的同型和相等"><a href="#矩阵的同型和相等" class="headerlink" title="矩阵的同型和相等"></a>矩阵的同型和相等</h2><p><img src="https://sfile.chatglm.cn/chatglm4/1b3ba54c-08d5-49d0-bcec-18ee01619e2c.png?image_process=format,webp"></p><hr><h2 id="矩阵的运算"><a href="#矩阵的运算" class="headerlink" title="矩阵的运算"></a>矩阵的运算</h2><h3 id="加减法"><a href="#加减法" class="headerlink" title="加减法"></a>加减法</h3><p><img src="https://sfile.chatglm.cn/chatglm4/4825d857-b0be-49c5-89e4-b53b6317dc61.png?image_process=format,webp"></p><h3 id="数与矩阵相乘"><a href="#数与矩阵相乘" class="headerlink" title="数与矩阵相乘"></a>数与矩阵相乘</h3><p><img src="https://sfile.chatglm.cn/chatglm4/e3df807b-283b-4a00-b713-fe56c0536381.png?image_process=format,webp"></p><h3 id="矩阵与矩阵相乘"><a href="#矩阵与矩阵相乘" class="headerlink" title="矩阵与矩阵相乘"></a>矩阵与矩阵相乘</h3><p><img src="https://sfile.chatglm.cn/chatglm4/12faf5c9-566d-49b5-a365-e2676da380ac.png?image_process=format,webp"></p><p><img src="https://sfile.chatglm.cn/chatglm4/f1923748-dfdd-4c82-affd-c269eebbe017.png?image_process=format,webp"></p><p><img src="https://sfile.chatglm.cn/chatglm4/c6a6e84e-32ca-401d-b109-a89308ef434d.png?image_process=format,webp"></p><h3 id="矩阵乘法的性质"><a href="#矩阵乘法的性质" class="headerlink" title="矩阵乘法的性质"></a>矩阵乘法的性质</h3><p><img src="https://sfile.chatglm.cn/chatglm4/83da144e-d7cd-4eac-9038-820bf9c61bcc.png?image_process=format,webp"></p><p><img src="https://sfile.chatglm.cn/chatglm4/be5c2444-d68e-4825-962f-785aba97f212.png?image_process=format,webp"></p><p><img src="https://sfile.chatglm.cn/chatglm4/9544af1f-6867-4a16-a4b4-f2311ab87497.png?image_process=format,webp"></p><hr><h2 id="特殊矩阵"><a href="#特殊矩阵" class="headerlink" title="特殊矩阵"></a>特殊矩阵</h2><h3 id="八个特殊矩阵"><a href="#八个特殊矩阵" class="headerlink" title="八个特殊矩阵"></a>八个特殊矩阵</h3><p><img src="https://sfile.chatglm.cn/chatglm4/cff3cc02-3755-4e3e-98c3-762fbbca50ae.png?image_process=format,webp"></p><h3 id="矩阵的转置"><a href="#矩阵的转置" class="headerlink" title="矩阵的转置"></a>矩阵的转置</h3><p><img src="https://sfile.chatglm.cn/chatglm4/b4693bfa-43c2-4c42-ad58-ab6a28a35cf4.png?image_process=format,webp"></p><h3 id="伴随矩阵"><a href="#伴随矩阵" class="headerlink" title="伴随矩阵"></a>伴随矩阵</h3><p><img src="https://sfile.chatglm.cn/chatglm4/92906753-ac9e-4db2-bc72-05ddfc4f7876.png?image_process=format,webp"></p><hr><h2 id="方阵的行列式"><a href="#方阵的行列式" class="headerlink" title="方阵的行列式"></a>方阵的行列式</h2><h3 id="什么是方阵？"><a href="#什么是方阵？" class="headerlink" title="什么是方阵？"></a>什么是方阵？</h3><p>方阵是线性代数中的一个概念，指的是行数和列数相等的矩阵。一个$( m \times n )的矩阵，如果( m &#x3D; n )，则该矩阵是方阵。方阵通常用( n \times n )表示，其中( n )$称为方阵的阶。<br>例如，一个2阶方阵如下所示：<br>$<br>\begin{bmatrix}<br>a &amp; b \<br>c &amp; d<br>\end{bmatrix}<br>$<br>在这个例子中，矩阵有两行两列，因此是一个方阵。</p><h3 id="方阵的性质"><a href="#方阵的性质" class="headerlink" title="方阵的性质"></a>方阵的性质</h3><p><img src="https://sfile.chatglm.cn/chatglm4/762c0098-7120-4c71-81ce-d76b7c60646b.png?image_process=format,webp"></p><hr><p><img src="https://sfile.chatglm.cn/chatglm4/3045e34e-47a9-40db-8731-40c3e213ac59.png?image_process=format,webp"></p>]]></content>
      
      
      <categories>
          
          <category> 线性代数 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 矩阵 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>行列式的计算</title>
      <link href="/2024/04/27/%E8%A1%8C%E5%88%97%E5%BC%8F%E7%9A%84%E8%AE%A1%E7%AE%97/"/>
      <url>/2024/04/27/%E8%A1%8C%E5%88%97%E5%BC%8F%E7%9A%84%E8%AE%A1%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<h1 id="行列式的计算"><a href="#行列式的计算" class="headerlink" title="行列式的计算"></a>行列式的计算</h1><p><img src="https://sfile.chatglm.cn/chatglm4/9f911959-ec20-4936-95f6-c1dc045e34ba.png?image_process=format,webp"></p><hr><h2 id="计算行列式的方法"><a href="#计算行列式的方法" class="headerlink" title="计算行列式的方法"></a>计算行列式的方法</h2><p><img src="https://sfile.chatglm.cn/chatglm4/640c3464-5aa8-403c-9244-d10034fdacfc.png?image_process=format,webp"></p><p><img src="https://sfile.chatglm.cn/chatglm4/af770304-79ef-40ef-9753-1a5074a58eaf.png?image_process=format,webp"></p><h3 id="行（列）相等型"><a href="#行（列）相等型" class="headerlink" title="行（列）相等型"></a>行（列）相等型</h3><p><img src="https://sfile.chatglm.cn/chatglm4/cbbf38cd-0ea3-43e3-b33d-482932f705d3.png?image_process=format,webp"></p><p><img src="https://sfile.chatglm.cn/chatglm4/4bc14cdc-6ef3-4833-9cda-e4c5a4a10099.png?image_process=format,webp"></p><h3 id="爪型行列式"><a href="#爪型行列式" class="headerlink" title="爪型行列式"></a>爪型行列式</h3><p><img src="https://sfile.chatglm.cn/chatglm4/4e1da424-6d01-4352-8543-5aa179a9e21e.png?image_process=format,webp"></p><p><img src="https://sfile.chatglm.cn/chatglm4/a420f8c7-8e54-447b-af49-4c3a0be987f6.png?image_process=format,webp"></p><h3 id="矩阵分块行列式"><a href="#矩阵分块行列式" class="headerlink" title="矩阵分块行列式"></a>矩阵分块行列式</h3><p><img src="https://sfile.chatglm.cn/chatglm4/d6b82b23-9cc3-415f-9b64-2a275859da92.png"></p><p><img src="https://sfile.chatglm.cn/chatglm4/e8348e3d-901e-4ad9-b79d-6678755f39e1.png?image_process=format,webp"></p><p><img src="https://sfile.chatglm.cn/chatglm4/2da3a85e-cee9-4a44-805b-afe61098a4a8.png?image_process=format,webp"></p><h2 id="行列式展开定理计算行列式"><a href="#行列式展开定理计算行列式" class="headerlink" title="行列式展开定理计算行列式"></a>行列式展开定理计算行列式</h2><h3 id="加边法"><a href="#加边法" class="headerlink" title="加边法"></a>加边法</h3><p><img src="https://sfile.chatglm.cn/chatglm4/632671bc-7c52-4431-bd75-62f9f00300c0.png?image_process=format,webp"></p><p><img src="https://sfile.chatglm.cn/chatglm4/d3bcaa7a-9557-4cb7-acd4-054f5751a13a.png?image_process=format,webp"></p><p><img src="https://sfile.chatglm.cn/chatglm4/7735a91d-5530-4a69-960d-f2621b40a3b2.png?image_process=format,webp"></p><p><img src="https://sfile.chatglm.cn/chatglm4/555a14ce-c2b7-4c65-9cbd-a300e5a5243f.png?image_process=format,webp"></p><h3 id="么型行列式"><a href="#么型行列式" class="headerlink" title="么型行列式"></a>么型行列式</h3><p><img src="https://sfile.chatglm.cn/chatglm4/706cb89b-d47e-45fb-b900-faf5223bf78b.png?image_process=format,webp"></p><p><img src="https://sfile.chatglm.cn/chatglm4/93620dd7-0e55-45c8-9313-2c35cc2c3547.png?image_process=format,webp"></p><h3 id="川型行列式"><a href="#川型行列式" class="headerlink" title="川型行列式"></a>川型行列式</h3><p><img src="https://sfile.chatglm.cn/chatglm4/57f3c4d7-9486-4836-a66c-2d41409ccb11.png?image_process=format,webp"></p><p><img src="https://sfile.chatglm.cn/chatglm4/9a7d7850-f4f2-4011-8312-386a04bc6471.png?image_process=format,webp"></p><h3 id="范德蒙行列式"><a href="#范德蒙行列式" class="headerlink" title="范德蒙行列式"></a>范德蒙行列式</h3><p><img src="https://sfile.chatglm.cn/chatglm4/bd67501c-254b-4cb2-9962-4f6beeaed3e4.png?image_process=format,webp"></p><p><img src="https://sfile.chatglm.cn/chatglm4/08f8e944-1402-47de-bb91-6f05b3aee4d1.png?image_process=format,webp"></p><hr><h2 id="用矩阵表示行列式"><a href="#用矩阵表示行列式" class="headerlink" title="用矩阵表示行列式"></a>用矩阵表示行列式</h2><p><img src="https://sfile.chatglm.cn/chatglm4/95c6c9f7-8ef6-4ebd-8eb9-1517aa7688d8.png?image_process=format,webp"></p><hr><p><img src="https://sfile.chatglm.cn/chatglm4/3f85fbce-5487-4f81-82ad-e724e0d804d8.png?image_process=format,webp"></p>]]></content>
      
      
      <categories>
          
          <category> 线性代数 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 行列式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三重积分</title>
      <link href="/2024/04/26/%E4%B8%89%E9%87%8D%E7%A7%AF%E5%88%86/"/>
      <url>/2024/04/26/%E4%B8%89%E9%87%8D%E7%A7%AF%E5%88%86/</url>
      
        <content type="html"><![CDATA[<h1 id="三重积分的计算"><a href="#三重积分的计算" class="headerlink" title="三重积分的计算"></a>三重积分的计算</h1><hr><h2 id="先一后二"><a href="#先一后二" class="headerlink" title="先一后二"></a>先一后二</h2><p>$I &#x3D; {\int\int\int }_{\Omega}f(x, y, z)d_v$</p><ol><li>D（投影区域）：联立消z</li><li>下表面：$z &#x3D; z_1(x, y)$</li><li>上表面：$z &#x3D; z_2(x, y)$</li></ol><p>$I &#x3D; \int\int_D dxdy \int_{z_1(x,y)}^{z_2(x, y)}f{(x,y,z)}d_z$</p><p><img src="https://sfile.chatglm.cn/chatglm4/fc498e95-346b-49f9-a384-d7a0a3ac7067.png?image_process=format,webp"></p><hr><h2 id="柱面坐标"><a href="#柱面坐标" class="headerlink" title="柱面坐标"></a>柱面坐标</h2><ol><li><p>D（投影区域）：联立消z</p></li><li><p>下表面：$z &#x3D; z_1(x, y)$</p></li><li><p>上表面：$z &#x3D; z_2(x, y)$</p></li></ol><p>在柱面坐标里，</p><ol><li>D—&gt;$\alpha\leq\theta\leq\beta$  $P_{1}(\theta)\leq\rho\leq P_{2}(\theta)$​</li><li>$z &#x3D; z_1(x, y)$—&gt;$z_1(\rho_1, \theta)$</li><li>$z &#x3D; z_2(x, y)$—&gt;$z_2(\rho_2, \theta)$</li></ol><p>转化方法：</p><p>$\begin{cases}   x&#x3D;\rho\cos\theta \    y&#x3D;\rho\sin\theta \end{cases}$</p><p>结果表示：<br>$I&#x3D;\int_{\alpha}^{\beta}d\theta\int_{\rho_{1}(\theta)}^{\rho_{2}(\theta)}\rho\cdot d\rho\cdot\int_{z(\rho,\theta)}^{z(\rho,\theta)}f(\rho cos\theta,\rho sin\theta,z)dz$</p><hr><h2 id="先二后一"><a href="#先二后一" class="headerlink" title="先二后一"></a>先二后一</h2><p>$c\leq z \leq  d$</p><p>$\int\int\int_{\Omega} fdv$ &#x3D; $\int_c^d dz \iint_{D_z} f(x,y,z)\cdot dxdy$</p><p><img src="https://sfile.chatglm.cn/chatglm4/42d25a71-7e0d-4523-9a3c-287e93a8b5fc.png?image_process=format,webp"></p><hr><h3 id="eg1"><a href="#eg1" class="headerlink" title="eg1:"></a>eg1:</h3><p>求$\ I&#x3D;\int \int\int_\Omega xdv $ : Ω由三个坐标面及平面x+2y+z&#x3D;1围成</p><p><img src="https://sfile.chatglm.cn/chatglm4/5ff0e801-da60-4329-999e-4f4268ed486e.png?image_process=format,webp" alt="img"></p><h3 id="eg2"><a href="#eg2" class="headerlink" title="eg2:"></a>eg2:</h3><p>求$\int \int\int_{\Omega }z\cdot dv ，\Omega $由$z&#x3D;x^{2}+y^{2}及z&#x3D;4$围成</p><p><img src="https://sfile.chatglm.cn/img2text/9703be5a-9a1a-42e5-b2b3-bd42c8592df5.jpg"></p><p>要计算三重积分 $\int \int \int_{\Omega} z , dv$，其中 $\Omega$ 由曲面 $z &#x3D; x^2 + y^2$ 和平面 $z &#x3D; 4$ 围成，我们可以按照以下步骤进行：</p><ol><li><p><strong>确定积分区域</strong>：首先，我们需要确定积分区域 $\Omega$。由于区域由曲面 $z &#x3D; x^2 + y^2$ 和平面 $z &#x3D; 4$ 围成，我们可以推断积分区域是在这两个曲面之间的空间区域。</p></li><li><p><strong>设置积分限</strong>：接下来，我们需要为每个变量设置积分限。由于这是一个三维积分，我们需要为 $x$、$y$ 和 $z$ 分别设置积分限。</p><ul><li><p>对于 $x$ 和 $y$，积分限将是由曲面 $z &#x3D; x^2 + y^2$ 和 $z &#x3D; 4$ 在 $xy$ 平面上投影形成的区域。这个区域是一个圆，半径为 2（因为当 $z &#x3D; 4$ 时，$x^2 + y^2 &#x3D; 4$）。</p></li><li><p>对于 $z$，积分限是从 $z &#x3D; x^2 + y^2$ 到 $z &#x3D; 4$。</p></li></ul></li><li><p><strong>写出积分表达式</strong>：积分表达式将是 $\int \int \int_{\Omega} z , dv$，其中 $dv$ 是体积元素，可以表示为 $dz , dy , dx$。</p></li><li><p><strong>进行积分</strong>：最后，按照积分限进行积分计算。<br>  用数学符号表示，积分表达式将是：</p></li></ol><p>  $\int_{-2}^{2}\int_{-\sqrt{4-x^2}}^{\sqrt{4-x^2}}\int_{x^2+y^2}^4z\mathrm{d}z\mathrm{d}y\mathrm{d}x$   </p><ul><li>法一（先一后二）</li></ul><p>  <img src="https://sfile.chatglm.cn/chatglm4/62a2fe97-259f-4fa3-af98-6e4c51420974.png?image_process=format,webp" alt="img"></p><ul><li>法二   （柱面坐标法）</li></ul><p>  <img src="https://sfile.chatglm.cn/chatglm4/433089d7-c8a8-419f-9226-115a4dc8c576.png?image_process=format,webp" alt="img"></p><ul><li>法三    （先二后一）</li></ul><p>  <img src="https://sfile.chatglm.cn/chatglm4/500cbdc0-10b1-452e-bbc6-0b038ba3f8f1.png?image_process=format,webp"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在计算多重积分时，”先一后二”和”先二后一”是两种不同的积分顺序策略，它们适用于不同类型的积分区域和被积函数。</p><ol><li>先一后二（先算单积分，再算双积分）：<br>这种积分顺序通常适用于积分区域是圆柱形或者可以分解为一维和二维积分的情况。具体来说，就是先对一个变量积分，得到一个关于另外两个变量的函数，然后再对这两个变量进行积分。这种顺序通常在积分区域的边界与一个坐标轴平行时使用，例如：</li></ol><ul><li>当积分区域是由两个垂直于x轴的平面和两个垂直于y轴的曲线围成的区域时，可以先对x积分，再对y积分。</li><li>当积分区域是圆柱形时，比如在柱坐标下，可以先对半径r积分，再对角度θ和高度z积分。</li></ul><ol start="2"><li>先二后一（先算双积分，再算单积分）：<br>这种积分顺序通常适用于积分区域是矩形或者可以分解为二维和一维积分的情况。具体来说，就是先对两个变量进行积分，得到一个关于第三个变量的函数，然后再对这个变量进行积分。这种顺序通常在积分区域的边界与坐标轴垂直时使用，例如：</li></ol><ul><li>当积分区域是由两个垂直于x轴的曲线和两个垂直于y轴的平面围成的区域时，可以先对y和z积分，再对x积分。</li><li>当积分区域是由两个垂直于x轴的平面和两个垂直于z轴的曲线围成的区域时，可以先对x和z积分，再对y积分。<br>在实际计算中，选择哪种积分顺序取决于积分区域的形状和被积函数的特点。通常，我们会选择一种使得积分计算尽可能简单和直接的顺序。如果可能的话，可以尝试不同的积分顺序，看哪种方式更容易计算。此外，积分区域的对称性和被积函数的性质（如奇偶性）也可以帮助我们选择最合适的积分顺序。</li></ul><p>同时计算三重积分时应注意的几点：</p><ol><li>选择合适的积分顺序：三重积分的积分顺序可以是 dxdydz、dydxdz、dzdxdy、dxdzdy、dydzdx 或 dzdydx。选择正确的积分顺序可以简化计算过程。通常，我们应该选择使被积函数尽可能简单的顺序。</li><li>确定积分限：在计算三重积分时，需要确定积分的上下限。这些限通常由积分区域的边界决定。正确确定积分限对于计算正确的结果至关重要。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 积分学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Typora 语法大全</title>
      <link href="/2024/04/26/Typora%20%E8%AF%AD%E6%B3%95%E5%A4%A7%E5%85%A8/"/>
      <url>/2024/04/26/Typora%20%E8%AF%AD%E6%B3%95%E5%A4%A7%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Typora-语法大全"><a href="#Typora-语法大全" class="headerlink" title="Typora 语法大全"></a>Typora 语法大全</h1><h2 id="Markdown-基本语法"><a href="#Markdown-基本语法" class="headerlink" title="Markdown 基本语法"></a>Markdown 基本语法</h2><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>#一级标题 （快捷键Ctrl+1）</p><p>##二阶标题 （快捷键Ctrl+2）</p><p>###三阶标题 （快捷键Ctrl+3）</p><p>####四阶标题 （快捷键Ctrl+4）</p><p>#####五阶标题 （快捷键Ctrl+5）</p><p>######六阶标题 （快捷键Ctrl+6）</p><h3 id="如何生成目录"><a href="#如何生成目录" class="headerlink" title="如何生成目录"></a>如何生成目录</h3><p>@[TOC]</p><p>在文章开始地方输入[toc]，即可在对应位置插入目录<br>@[TOC]目录</p><p>以下不用写，直接写@<a href="%E7%9B%AE%E5%BD%95">TOC</a>即可自动获到目录中<br>#一阶标题 （快捷键Ctrl+1）<br>##二阶标题 （快捷键Ctrl+2）<br>###三阶标题 （快捷键Ctrl+3）<br>####四阶标题 （快捷键Ctrl+4）<br>#####五阶标题 （快捷键Ctrl+5）<br>######六阶标题 （快捷键Ctrl+6）</p><h3 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h3><p>下划线使用格式 下划线的内容&lt;\u&gt; 或者快捷键Ctrl+U</p><h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><p>删除线使用格式：~~ 删除线的内容</p><h3 id="字体加粗"><a href="#字体加粗" class="headerlink" title="字体加粗"></a>字体加粗</h3><p>前面某个字段使用两个*，加粗字体 或者快捷键Ctrl+B</p><h3 id="字体倾斜"><a href="#字体倾斜" class="headerlink" title="字体倾斜"></a>字体倾斜</h3><p>使用一个”星“，字体倾斜了 或者快捷键Ctrl+I</p><h3 id="图片的插入"><a href="#图片的插入" class="headerlink" title="图片的插入"></a>图片的插入</h3><p>直接拖你想要图片进来即可</p><h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><p>使用快捷键Ctrl+K<br>使用2个反斜杠””，<br>[百度][<a href="https://www.baidu.com/]">https://www.baidu.com/]</a></p><h3 id="代码区域"><a href="#代码区域" class="headerlink" title="代码区域"></a>代码区域</h3><p>使用&#96;&#96;&#96;+回车即可在内容区编辑内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hellow world&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> namespase std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;hello world&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="有序无序列表"><a href="#有序无序列表" class="headerlink" title="有序无序列表"></a>有序无序列表</h3><h3 id="任务列表-："><a href="#任务列表-：" class="headerlink" title="任务列表 ："></a>任务列表 ：</h3><ul><li><input checked="" disabled="" type="checkbox"> java</li><li><input disabled="" type="checkbox"> python</li></ul><h4 id="创建无序列：-、-、-（后面加空格）"><a href="#创建无序列：-、-、-（后面加空格）" class="headerlink" title="创建无序列：+、-、 * （后面加空格）"></a>创建无序列：+、-、 * （后面加空格）</h4><p>如：</p><p>+ </p><ul><li><ul><li></li></ul></li></ul><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><p>1. </p><p>2. </p><h3 id="水平分割线"><a href="#水平分割线" class="headerlink" title="水平分割线"></a>水平分割线</h3><p>*** 或 - - -</p><hr><h3 id="引用的使用格式"><a href="#引用的使用格式" class="headerlink" title="引用的使用格式"></a>引用的使用格式</h3><p>“&gt;+空格”</p><blockquote><p>+ </p></blockquote><h3 id="表情"><a href="#表情" class="headerlink" title="表情"></a>表情</h3><p>:smile:</p><h3 id="首行缩进"><a href="#首行缩进" class="headerlink" title="首行缩进"></a>首行缩进</h3><ol><li>&emsp;</li><li>&ensp;</li></ol><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A --&gt; B</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">A-&gt;&gt;B: How are you?</span><br><span class="line">B--&gt;&gt;A:Great!</span><br></pre></td></tr></table></figure><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><table><thead><tr><th align="center">学号</th><th align="center">姓名</th><th align="center">序号</th></tr></thead><tbody><tr><td align="center">小明</td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p><img src="https://sfile.chatglm.cn/chatglm4/4ef1d96e-019e-423a-b126-fbe0822d374b.png?image_process=format,webp" alt="This is a picture" title="曹操"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>装饰器（decorator)</title>
      <link href="/2024/04/25/%E8%A3%85%E9%A5%B0%E5%99%A8%EF%BC%88decorator)/"/>
      <url>/2024/04/25/%E8%A3%85%E9%A5%B0%E5%99%A8%EF%BC%88decorator)/</url>
      
        <content type="html"><![CDATA[<h1 id="装饰器（decorator"><a href="#装饰器（decorator" class="headerlink" title="装饰器（decorator)"></a>装饰器（decorator)</h1><p>​<strong>在python中我们可以将函数作为参数传递给另一个参数, 而装饰器就是利用这一点制成的</strong></p><p><strong>eg:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x*x</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_running</span>(<span class="params">f,x</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;f.__name__&#125;</span> is running.&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> f(x)</span><br><span class="line">result = print_running(square, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="comment"># square is running.</span></span><br><span class="line"><span class="comment"># 4</span></span><br></pre></td></tr></table></figure><h2 id="什么是装饰器？"><a href="#什么是装饰器？" class="headerlink" title="什么是装饰器？"></a>什么是装饰器？</h2><p>​<strong>装饰器本质上是一个函数，它会接受函数作为参数，在自己的内部根据这个函数定义一个新的函数，新函数在包含传入函数功能的同时，扩充了其他的功能，然后装饰器将新函数返回，我们就可以在代码里使用返回的新函数替代原来的传入函数</strong>。</p><p><strong>eg:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decorator</span>(<span class="params">func</span>):  <span class="comment"># 定义一个装饰器</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):  <span class="comment"># 定义一个新函数</span></span><br><span class="line">        <span class="comment"># 添加的新功能</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;func.__name__&#125;</span> is running.&#x27;</span>)</span><br><span class="line">        result = func(*args, **kwargs)  <span class="comment"># 因为新函数可以使用原函数的功能，所以将原函数的返回值赋给result</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"><span class="keyword">return</span> wrapper  <span class="comment"># 返回装饰后的新函数</span></span><br></pre></td></tr></table></figure><p><strong>优化: 测量函数运行时间</strong></p><p><strong>eg:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decorator</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        start_time = time.time()</span><br><span class="line">        result = func(*args, **kwargs)</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;func.__name__&#125;</span> execution time is <span class="subst">&#123;end_time-start_time&#125;</span> seconds.&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure><h2 id="怎么使用装饰器？"><a href="#怎么使用装饰器？" class="headerlink" title="怎么使用装饰器？"></a>怎么使用装饰器？</h2><p><strong>1. 直接使用</strong></p><p><strong>eg:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x*x</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decorator</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        start_time = time.time()</span><br><span class="line">        result = func(*args, **kwargs)</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;func.__name__&#125;</span> execution time is <span class="subst">&#123;end_time-start_time&#125;</span> seconds.&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line">decorated_square = decorator(square)  <span class="comment"># decorated_square 为装饰后的函数</span></span><br><span class="line"><span class="built_in">print</span>(decorated_square(<span class="number">10</span>))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">输出：</span></span><br><span class="line"><span class="string">square execution time is 0.0 seconds.</span></span><br><span class="line"><span class="string">100</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>2. 使用@</strong></p><p><strong>eg:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decorator</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        start_time = time.time()</span><br><span class="line">        result = func(*args, **kwargs)</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;func.__name__&#125;</span> execution time is <span class="subst">&#123;end_time-start_time&#125;</span> seconds.&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x*x</span><br><span class="line"><span class="built_in">print</span>(square(<span class="number">10</span>))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">输出：</span></span><br><span class="line"><span class="string">square execution time is 0.0 seconds.</span></span><br><span class="line"><span class="string">100</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="装饰器生成器"><a href="#装饰器生成器" class="headerlink" title="装饰器生成器"></a>装饰器生成器</h2><p><strong>装饰器生成器会根据参数生成不同的装饰器</strong></p><p><strong>eg:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">timer</span>(<span class="params">threshold</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decorator</span>(<span class="params">func</span>):  <span class="comment"># 定义一个装饰器</span></span><br><span class="line"><span class="meta">        @functools.wraps(<span class="params">func</span>)  </span><span class="comment"># functools 是python内置的函数，能继承原函数的属性</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">            start_time = time.time()</span><br><span class="line">            result = func(*args, **kwargs)</span><br><span class="line">            end_time = time.time()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> end_time - start_time &gt; threshold:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;func.__name__&#125;</span> took longer than <span class="subst">&#123;threshold&#125;</span> seconds&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> decorator  <span class="comment"># 返回生成的装饰器</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@timer(<span class="params"><span class="number">0.2</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sleep_04</span>():</span><br><span class="line">    time.sleep(<span class="number">0.4</span>)</span><br><span class="line">    </span><br><span class="line">sleep_04()</span><br></pre></td></tr></table></figure><h2 id="使用装饰器的原因"><a href="#使用装饰器的原因" class="headerlink" title="使用装饰器的原因"></a>使用装饰器的原因</h2><ol><li><strong>代码复用</strong>：装饰器可以将一些通用的功能抽象出来，作为装饰器函数，然后可以在多个函数中使用同一个装饰器，从而实现代码的复用。</li><li><strong>代码清晰</strong>：通过使用装饰器，可以将与函数逻辑无关的功能分离出去，使得函数的代码更加清晰易读，提高了代码的可维护性。</li><li><strong>功能扩展</strong>：装饰器可以在不修改原函数代码的情况下，给函数添加新的功能，如日志记录、性能分析、权限验证等。</li><li><strong>解耦合</strong>：使用装饰器可以将不同层次的功能解耦合，使得各个功能模块之间的依赖性降低，提高了代码的灵活性和可扩展性。</li><li><strong>面向切面编程（AOP）</strong>：装饰器是面向切面编程的一种重要实现方式，可以在不改变原有代码的情况下，通过横向切割程序的功能，实现横切关注点的模块化管理。</li></ol>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>归并排序（merge_sort)</title>
      <link href="/2024/04/25/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%EF%BC%88merge_sort)/"/>
      <url>/2024/04/25/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%EF%BC%88merge_sort)/</url>
      
        <content type="html"><![CDATA[<h1 id="归并排序（merge-sort"><a href="#归并排序（merge-sort" class="headerlink" title="归并排序（merge_sort)"></a>归并排序（merge_sort)</h1><h2 id="什么是归并？"><a href="#什么是归并？" class="headerlink" title="什么是归并？"></a>什么是归并？</h2><ul><li><strong>假设现在列表分两段有序，如何将其合成为一个有序列表</strong></li></ul><p><img src="https://sfile.chatglm.cn/chatglm4/f9e120ec-c8e6-4503-a438-4f8f94e3db59.png?image_process=format,webp" alt="image-20240329155927795"></p><ul><li><strong>这种操作称为一次归并，对每一段的元素进行比较，直到其中一段被比完，直接将另一段的剩下的部分放在排好序的列表后即可</strong></li></ul><hr><h3 id="归并的代码实现"><a href="#归并的代码实现" class="headerlink" title="归并的代码实现"></a>归并的代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">li, low, mid, high</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    low,mid,high 将列表分为两段</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 定义两个指针，范围是列表的两段</span></span><br><span class="line">    i = low</span><br><span class="line">    j = mid + <span class="number">1</span></span><br><span class="line">    <span class="comment"># 新建一个临时列表来存储排好序的元素</span></span><br><span class="line">    ltmp = []</span><br><span class="line">    <span class="keyword">while</span> i &lt;= mid <span class="keyword">and</span> j &lt;= high:  <span class="comment"># 保证两个指针不会超出其所在范围</span></span><br><span class="line">        <span class="keyword">if</span> li[i] &lt; li[j]:</span><br><span class="line">            ltmp.append(li[i])</span><br><span class="line">            i += <span class="number">1</span>  <span class="comment"># 将左半指针右移一位</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ltmp.append(li[j])</span><br><span class="line">            j += <span class="number">1</span>  <span class="comment"># 将右半指针右移一位</span></span><br><span class="line">    <span class="comment"># while 执行完了，左右两边一定有一边被处理完了</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= mid:</span><br><span class="line">        ltmp.append(li[i])</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> j &lt;= high:</span><br><span class="line">        ltmp.append(li[j])</span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line">    li[low:high + <span class="number">1</span>] = ltmp  <span class="comment"># 将新列表写回去</span></span><br><span class="line">    <span class="keyword">return</span> li</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">li = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">8</span>]</span><br><span class="line">merge(li, <span class="number">0</span>, <span class="number">3</span>, <span class="number">7</span>)</span><br><span class="line"><span class="built_in">print</span>(li)</span><br></pre></td></tr></table></figure><hr><h2 id="归并排序——使用归并"><a href="#归并排序——使用归并" class="headerlink" title="归并排序——使用归并"></a>归并排序——使用归并</h2><pre><code>    ### 实现归并排序分为三步</code></pre><ol><li><strong>分解：将列表越分越小，直至分成一个元素</strong></li><li><strong>终止条件：一个元素是有序的</strong></li><li><strong>合并：将两个有序列表归并，列表越来越大</strong></li></ol><p><img src="https://sfile.chatglm.cn/chatglm4/9d3f206e-3936-44b0-a756-978b43735567.png?image_process=format,webp" alt="image-20240329163131698"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 归并过程</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">li, low, mid, high</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    low,mid,high 将列表分为两段</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 定义两个指针，范围是列表的两段</span></span><br><span class="line">    i = low</span><br><span class="line">    j = mid + <span class="number">1</span></span><br><span class="line">    <span class="comment"># 新建一个临时列表来存储排好序的元素</span></span><br><span class="line">    ltmp = []</span><br><span class="line">    <span class="keyword">while</span> i &lt;= mid <span class="keyword">and</span> j &lt;= high:  <span class="comment"># 保证两个指针不会超出其所在范围</span></span><br><span class="line">        <span class="keyword">if</span> li[i] &lt; li[j]:</span><br><span class="line">            ltmp.append(li[i])</span><br><span class="line">            i += <span class="number">1</span>  <span class="comment"># 将左半指针右移一位</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ltmp.append(li[j])</span><br><span class="line">            j += <span class="number">1</span>  <span class="comment"># 将右半指针右移一位</span></span><br><span class="line">    <span class="comment"># while 执行完了，左右两边一定有一边被处理完了</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= mid:</span><br><span class="line">        ltmp.append(li[i])</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> j &lt;= high:</span><br><span class="line">        ltmp.append(li[j])</span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line">    li[low:high + <span class="number">1</span>] = ltmp  <span class="comment"># 将新列表写回去</span></span><br><span class="line">    <span class="keyword">return</span> li</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge_sort</span>(<span class="params">li, low, high</span>):</span><br><span class="line">    <span class="keyword">if</span> low &lt; high:  <span class="comment"># 至少有两个元素，接下来开始递归，终止条件</span></span><br><span class="line">        <span class="comment"># 先分解</span></span><br><span class="line">        mid = (high + low) // <span class="number">2</span></span><br><span class="line">        merge_sort(li, low, mid)  <span class="comment"># 递归左边</span></span><br><span class="line">        merge_sort(li, mid + <span class="number">1</span>, high)  <span class="comment"># 递归右边</span></span><br><span class="line">        <span class="comment"># 开始归并</span></span><br><span class="line">        merge(li, low, mid, high)</span><br><span class="line">        </span><br><span class="line">li = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1000</span>))</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">random.shuffle(li)</span><br><span class="line"><span class="built_in">print</span>(li)</span><br><span class="line">merge_sort(li, <span class="number">0</span>, <span class="built_in">len</span>(li) - <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(li)</span><br></pre></td></tr></table></figure><hr><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>​<strong>显然，一次归并操作的时间复杂度为<code>O(n)</code>，而归并了<code>logn</code>层，所以归并排序的时间复杂度为<code>O(nlogn)</code>。</strong></p><hr><h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><p>​<strong>归并排序的空间复杂度为<code>O(n)</code></strong></p>]]></content>
      
      
      <categories>
          
          <category> 排序算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>计数排序</title>
      <link href="/2024/04/25/%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F/"/>
      <url>/2024/04/25/%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h1><ul><li>对列表进行排序，已知列表中的数的范围都在0~100之间。设计时间复杂度为$O(n)$的算法。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">count_sort</span>(<span class="params">li, max_count=<span class="number">100</span></span>):</span><br><span class="line">    count = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(max_count + <span class="number">1</span>)]</span><br><span class="line">    <span class="keyword">for</span> val <span class="keyword">in</span> li:</span><br><span class="line">        count[val] += <span class="number">1</span></span><br><span class="line">    li.clear()</span><br><span class="line">    <span class="keyword">for</span> idx, val <span class="keyword">in</span> <span class="built_in">enumerate</span>(count):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(val):</span><br><span class="line">            li.append(idx)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">li = [random.randint(<span class="number">0</span>, <span class="number">100</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>)]</span><br><span class="line"><span class="built_in">print</span>(li)</span><br><span class="line">count_sort(li)</span><br><span class="line"><span class="built_in">print</span>(li)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 排序算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>希尔排序(Shell Sort)</title>
      <link href="/2024/04/25/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F(Shell%20Sort)/"/>
      <url>/2024/04/25/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F(Shell%20Sort)/</url>
      
        <content type="html"><![CDATA[<h1 id="希尔排序-Shell-Sort"><a href="#希尔排序-Shell-Sort" class="headerlink" title="希尔排序(Shell Sort)"></a>希尔排序(Shell Sort)</h1><hr><h2 id="什么是希尔排序？"><a href="#什么是希尔排序？" class="headerlink" title="什么是希尔排序？"></a>什么是希尔排序？</h2><ul><li><strong>希尔排序(Shell Sort)是一种分组插入排序的排序算法</strong></li><li><strong>首先取整数$d_1 &#x3D; n&#x2F;2$，将元素分为$d_1$个组，每组相邻量元素之间距离为$d_1$，在各组内进行直接插入排序。</strong></li><li><strong>取第二个整数$d_2$，重复上述分组过程，知道$d_i$，即所有元素在同一组内进行直接插入排序。</strong></li><li><strong>希尔排序每趟并不使某些元素有序，而是使整体数据越来越接近有序；最后一趟排序使得所有数据有序。</strong></li></ul><p><img src="https://sfile.chatglm.cn/chatglm4/d5ac7579-58a0-4f6f-823d-ab5638eab47b.png?image_process=format,webp"></p><p><strong>eg:</strong><br><img src="https://sfile.chatglm.cn/chatglm4/1d810708-4a1f-4ca9-947f-51b011d22836.png?image_process=format,webp"><br><img src="https://sfile.chatglm.cn/chatglm4/336dbab5-8a18-4061-bb8e-11ab4b1003cd.png?image_process=format,webp"></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在原插入排序算法的基础上，增加一个gap参数，代表分的组</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">insert_sort_gap</span>(<span class="params">lis, gap</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(gap, <span class="built_in">len</span>(lis)):  <span class="comment"># i表示摸到的牌的下标</span></span><br><span class="line">        tmp = lis[i]</span><br><span class="line">        j = i - gap  <span class="comment"># j指的是手里的牌的下标</span></span><br><span class="line">        <span class="keyword">while</span> j &gt;= <span class="number">0</span> <span class="keyword">and</span> lis[j] &gt; tmp:</span><br><span class="line">            lis[j + gap] = lis[j]</span><br><span class="line">            j -= gap</span><br><span class="line">        <span class="comment"># 当手里的牌小于摸到的牌时，将摸到的牌放到手里牌的后一位。</span></span><br><span class="line">        <span class="comment"># 此时后一位时空的，因为大于手里的牌都往后移了一位。</span></span><br><span class="line">        lis[j + gap] = tmp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shell_sort</span>(<span class="params">li</span>):</span><br><span class="line">    d = <span class="built_in">len</span>(li) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> d &gt;= <span class="number">1</span>:</span><br><span class="line">        insert_sort_gap(li, d)</span><br><span class="line">        d = d // <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">li = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1000</span>))</span><br><span class="line"></span><br><span class="line">random.shuffle(li)</span><br><span class="line">shell_sort(li)</span><br><span class="line"><span class="built_in">print</span>(li)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 排序算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>高数复习1</title>
      <link href="/2024/04/25/%E9%AB%98%E6%95%B0%E5%A4%8D%E4%B9%A01/"/>
      <url>/2024/04/25/%E9%AB%98%E6%95%B0%E5%A4%8D%E4%B9%A01/</url>
      
        <content type="html"><![CDATA[<h1 id="高数复习1"><a href="#高数复习1" class="headerlink" title="高数复习1"></a>高数复习1</h1><p>边听歌边复习，一个字爽！</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1478626970&auto=1&height=66"></iframe><hr><h2 id="数量积"><a href="#数量积" class="headerlink" title="数量积"></a>数量积</h2><p><img src="https://sfile.chatglm.cn/chatglm4/d06d599e-bfd1-47f4-919d-3debd7a3a059.png?image_process=format,webp"></p><p><img src="https://sfile.chatglm.cn/chatglm4/0ea57075-308e-49d4-bca0-ef0dc31726ce.png?image_process=format,webp" alt="img"></p><h3 id="投影"><a href="#投影" class="headerlink" title="投影"></a>投影</h3><p><img src="https://sfile.chatglm.cn/chatglm4/e0476784-387c-4ba6-aae1-a2c6f7279aa4.png?image_process=format,webp" alt="img"></p><p><img src="https://sfile.chatglm.cn/chatglm4/04848e6a-4eda-4286-9630-be88af9b628c.png?image_process=format,webp"></p><hr><h2 id="向量积（又称为叉乘）"><a href="#向量积（又称为叉乘）" class="headerlink" title="向量积（又称为叉乘）"></a>向量积（又称为叉乘）</h2><h3 id="力矩"><a href="#力矩" class="headerlink" title="力矩"></a>力矩</h3><p><img src="https://sfile.chatglm.cn/chatglm4/6ed3e845-a786-4982-9984-75ad1b51b227.png?image_process=format,webp"></p><p><img src="https://sfile.chatglm.cn/chatglm4/42cc88cd-8814-4e73-836d-321127a92418.png?image_process=format,webp" alt="img"></p><p><img src="https://sfile.chatglm.cn/chatglm4/e126293d-51c3-4c90-8efe-c7bec32fdd8e.png?image_process=format,webp" alt="img"></p><p><img src="https://sfile.chatglm.cn/chatglm4/9a8e1300-5ca3-434c-beb9-13f95a5d8756.png?image_process=format,webp" alt="img"></p><p><img src="https://sfile.chatglm.cn/chatglm4/9da5b347-709d-43a8-b6c5-aa4e53e4e9d8.png?image_process=format,webp" alt="img"></p><p><img src="https://sfile.chatglm.cn/chatglm4/45fe9728-1933-40db-91ad-5b12b069055b.png?image_process=format,webp" alt="img"></p><p><img src="https://sfile.chatglm.cn/chatglm4/bc674d3d-08bd-4cae-9f85-ab1920a6ee9e.png?image_process=format,webp" alt="img"></p><p><img src="https://sfile.chatglm.cn/chatglm4/b9ff4aba-3c7f-40bd-81db-6ab8a73a222a.png?image_process=format,webp" alt="img"></p><p><img src="https://sfile.chatglm.cn/chatglm4/5f2873c8-7522-4b20-a0c5-eaeaaf265950.png?image_process=format,webp" alt="img"></p><h3 id="eg1"><a href="#eg1" class="headerlink" title="eg1:"></a>eg1:</h3><p><img src="https://sfile.chatglm.cn/chatglm4/bf4bd6c2-e229-4188-a357-18fcde3bcab7.png?image_process=format,webp" alt="img"></p><h3 id="eg2"><a href="#eg2" class="headerlink" title="eg2:"></a>eg2:</h3><p><img src="https://sfile.chatglm.cn/chatglm4/4ae7ebc1-446d-4624-846a-5190260ec3d8.png?image_process=format,webp" alt="img"></p><h2 id="混合积"><a href="#混合积" class="headerlink" title="混合积"></a>混合积</h2><p><img src="https://sfile.chatglm.cn/chatglm4/3c72c501-5f69-4623-b5bb-b03930eee198.png?image_process=format,webp" alt="img"></p><p><img src="https://sfile.chatglm.cn/chatglm4/b167333f-b09a-44ab-ad59-6d56011127fc.png?image_process=format,webp" alt="img"></p><p><img src="https://sfile.chatglm.cn/chatglm4/deb4c2d3-1db2-476d-a720-2936bd637f99.png?image_process=format,webp" alt="img"></p><h3 id="eg1-1"><a href="#eg1-1" class="headerlink" title="eg1:"></a>eg1:</h3><p><img src="https://sfile.chatglm.cn/chatglm4/34fc6b13-cd35-4bb2-8224-703d184a4113.png?image_process=format,webp" alt="img"></p><h3 id="eg2-1"><a href="#eg2-1" class="headerlink" title="eg2:"></a>eg2:</h3><p><img src="https://sfile.chatglm.cn/chatglm4/0383426c-1f3a-478b-8efa-6146c134aaa4.png?image_process=format,webp" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 高等数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 向量计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性回归的简单实现</title>
      <link href="/2024/04/25/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E7%9A%84%E7%AE%80%E6%B4%81%E5%AE%9E%E7%8E%B0/"/>
      <url>/2024/04/25/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E7%9A%84%E7%AE%80%E6%B4%81%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="线性回归的简洁实现"><a href="#线性回归的简洁实现" class="headerlink" title="线性回归的简洁实现"></a>线性回归的简洁实现</h1><p>在过去的几年里，出于对深度学习强烈的兴趣， 许多公司、学者和业余爱好者开发了各种成熟的开源框架。 这些框架可以自动化基于梯度的学习算法中重复性的工作。 在 3.2节中，我们只运用了： （1）通过张量来进行数据存储和线性代数； （2）通过自动微分来计算梯度。 实际上，由于数据迭代器、损失函数、优化器和神经网络层很常用， 现代深度学习库也为我们实现了这些组件。</p><p>本节将介绍如何通过使用深度学习框架来简洁地实现 3.2节中的线性回归模型。</p><h1 id="生成数据集"><a href="#生成数据集" class="headerlink" title="生成数据集"></a>生成数据集</h1><p>与 3.2节中类似，我们首先生成数据集。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch.utils <span class="keyword">import</span> data</span><br><span class="line"><span class="keyword">from</span> d2l <span class="keyword">import</span> torch <span class="keyword">as</span> d2l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义真实的权重向量true_w和偏置true_b</span></span><br><span class="line">true_w = torch.tensor([<span class="number">2</span>, -<span class="number">3.4</span>])</span><br><span class="line">true_b = <span class="number">4.2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用d2l库中的synthetic_data函数生成合成数据集</span></span><br><span class="line"><span class="comment"># synthetic_data函数接受真实的权重、偏置和一个样本数量，生成特征矩阵features和标签向量labels</span></span><br><span class="line"><span class="comment"># 特征矩阵的每一行是一个样本，每一列是一个特征；标签向量中的每个元素是对应样本的标签</span></span><br><span class="line">features, labels = d2l.synthetic_data(true_w, true_b, <span class="number">1000</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="读取数据集"><a href="#读取数据集" class="headerlink" title="读取数据集"></a>读取数据集</h1><p>我们可以调用框架中现有的API来读取数据。 我们将和作为API的参数传递，并通过数据迭代器指定。 此外，布尔值表示是否希望数据迭代器对象在每个迭代周期内打乱数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">load_array</span>(<span class="params">data_arrays, batch_size, is_train=<span class="literal">True</span></span>):  <span class="comment">#@save</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    构造一个PyTorch数据迭代器。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">    - data_arrays: 包含数据数组的元组，通常是一个特征数组和一个标签数组。</span></span><br><span class="line"><span class="string">    - batch_size: 每个批次的样本数量。</span></span><br><span class="line"><span class="string">    - is_train: 布尔值，表示是否为训练数据。如果是，则在迭代时随机打乱数据。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    返回:</span></span><br><span class="line"><span class="string">    - DataLoader: 一个PyTorch数据迭代器，可以用于在训练和测试阶段提供数据批次。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    这个函数首先将输入的数据数组转换为一个TensorDataset，这是一个包装了数据数组的类，能够提供索引接口。</span></span><br><span class="line"><span class="string">    然后，使用DataLoader类来创建一个可迭代的数据加载器，它可以在每个迭代周期中提供大小为batch_size的数据批次。</span></span><br><span class="line"><span class="string">    如果is_train为True，则会在每个epoch开始时打乱数据，以便在训练过程中引入随机性。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    dataset = data.TensorDataset(*data_arrays)  <span class="comment"># 将数据数组转换为TensorDataset</span></span><br><span class="line">    <span class="keyword">return</span> data.DataLoader(dataset, batch_size, shuffle=is_train)  <span class="comment"># 创建DataLoader</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置批处理大小</span></span><br><span class="line">batch_size = <span class="number">10</span></span><br><span class="line"><span class="comment"># 创建数据迭代器，传入特征和标签数组，以及批处理大小</span></span><br><span class="line">data_iter = load_array((features, labels), batch_size)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用的方式与我们在 3.2节中使用函数的方式相同。为了验证是否正常工作，让我们读取并打印第一个小批量样本。 与 3.2节不同，这里我们使用构造Python迭代器，并使用从迭代器中获取第一项。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">next</span>(<span class="built_in">iter</span>(data_iter))</span><br></pre></td></tr></table></figure><pre><code>[tensor([[-0.8421,  0.7613],         [ 0.9561, -0.2997],         [-1.0493,  0.9408],         [ 0.8585, -1.3308],         [ 0.4646,  0.2252],         [-0.6054,  0.1887],         [-0.1280,  0.1882],         [-0.9369, -0.8599],         [ 1.9123, -0.7680],         [-0.7061, -0.0104]]), tensor([[-0.0759],         [ 7.1076],         [-1.1003],         [10.4446],         [ 4.3523],         [ 2.3550],         [ 3.3027],         [ 5.2368],         [10.6245],         [ 2.8324]])]</code></pre><h1 id="定义模型"><a href="#定义模型" class="headerlink" title="定义模型"></a>定义模型</h1><p>当我们在 3.2节中实现线性回归时， 我们明确定义了模型参数变量，并编写了计算的代码，这样通过基本的线性代数运算得到输出。 但是，如果模型变得更加复杂，且当我们几乎每天都需要实现模型时，自然会想简化这个过程。 这种情况类似于为自己的博客从零开始编写网页。 做一两次是有益的，但如果每个新博客就需要工程师花一个月的时间重新开始编写网页，那并不高效。</p><p>对于标准深度学习模型，我们可以使用框架的预定义好的层。这使我们只需关注使用哪些层来构造模型，而不必关注层的实现细节。 我们首先定义一个模型变量，它是一个类的实例。 类将多个层串联在一起。 当给定输入数据时，实例将数据传入到第一层， 然后将第一层的输出作为第二层的输入，以此类推。 在下面的例子中，我们的模型只包含一个层，因此实际上不需要。 但是由于以后几乎所有的模型都是多层的，在这里使用会让你熟悉“标准的流水线”。netSequentialSequentialSequentialSequentialSequential</p><p>回顾 图3.1.2中的单层网络架构， 这一单层被称为全连接层（fully-connected layer）， 因为它的每一个输入都通过矩阵-向量乘法得到它的每个输出。</p><p>在PyTorch中，全连接层在类中定义。 值得注意的是，我们将两个参数传递到中。 第一个指定输入特征形状，即2，第二个指定输出特征形状，输出特征形状为单个标量，因此为1。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入torch的nn模块，这是PyTorch中专门用于构建神经网络的核心模块</span></span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个顺序模型net，它是一个按照顺序执行的一系列层的容器</span></span><br><span class="line"><span class="comment"># nn.Sequential是一个顺序容器，模块将按照它们在构造器中传递的顺序添加到它里面</span></span><br><span class="line">net = nn.Sequential(nn.Linear(<span class="number">2</span>, <span class="number">1</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="初始化模型参数"><a href="#初始化模型参数" class="headerlink" title="初始化模型参数"></a>初始化模型参数</h1><p>在使用之前，我们需要初始化模型参数。 如在线性回归模型中的权重和偏置。 深度学习框架通常有预定义的方法来初始化参数。 在这里，我们指定每个权重参数应该从均值为0、标准差为0.01的正态分布中随机采样， 偏置参数将初始化为零。</p><p>正如我们在构造时指定输入和输出尺寸一样， 现在我们能直接访问参数以设定它们的初始值。 我们通过选择网络中的第一个图层， 然后使用和方法访问参数。 我们还可以使用替换方法和来重写参数值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对网络的第一层（通常是线性层或全连接层）的权重进行初始化</span></span><br><span class="line"><span class="comment"># 使用正态分布随机初始化权重，均值设为0，标准差设为0.01</span></span><br><span class="line">net[<span class="number">0</span>].weight.data.normal_(<span class="number">0</span>, <span class="number">0.01</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将网络的第一层的偏置初始化为0</span></span><br><span class="line"><span class="comment"># 这通常是因为偏置可以看作是网络的“初始值”，而初始化为0意味着网络在开始时是中立的</span></span><br><span class="line">net[<span class="number">0</span>].bias.data.fill_(<span class="number">0</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>tensor([0.])</code></pre><h1 id="定义损失函数¶"><a href="#定义损失函数¶" class="headerlink" title="定义损失函数¶"></a>定义损失函数¶</h1><p>计算均方误差使用的是类，也称为平方(L_2)范数。 默认情况下，它返回所有样本损失的平均值。MSELoss</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">loss = nn.MSELoss()</span><br></pre></td></tr></table></figure><h1 id="定义优化算法"><a href="#定义优化算法" class="headerlink" title="定义优化算法"></a>定义优化算法</h1><p>小批量随机梯度下降算法是一种优化神经网络的标准工具， PyTorch在模块中实现了该算法的许多变种。 当我们实例化一个实例时，我们要指定优化的参数 （可通过从我们的模型中获得）以及优化算法所需的超参数字典。 小批量随机梯度下降只需要设置值，这里设置为0.03。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">trainer = torch.optim.SGD(net.parameters(), lr=<span class="number">0.03</span>)</span><br></pre></td></tr></table></figure><h1 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h1><p>通过深度学习框架的高级API来实现我们的模型只需要相对较少的代码。 我们不必单独分配参数、不必定义我们的损失函数，也不必手动实现小批量随机梯度下降。 当我们需要更复杂的模型时，高级API的优势将大大增加。 当我们有了所有的基本组件，训练过程代码与我们从零开始实现时所做的非常相似。</p><p>回顾一下：在每个迭代周期里，我们将完整遍历一次数据集（）， 不停地从中获取一个小批量的输入和相应的标签。 对于每一个小批量，我们会进行以下步骤:train_data</p><p>通过调用生成预测并计算损失（前向传播）。net(X)l</p><p>通过进行反向传播来计算梯度。</p><p>通过调用优化器来更新模型参数。</p><p>为了更好的衡量训练效果，我们计算每个迭代周期后的损失，并打印它来监控训练过程。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">num_epochs = <span class="number">3</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(num_epochs):</span><br><span class="line">    <span class="keyword">for</span> X, y <span class="keyword">in</span> data_iter:</span><br><span class="line">        l = loss(net(X) ,y)</span><br><span class="line">        trainer.zero_grad()</span><br><span class="line">        l.backward()</span><br><span class="line">        trainer.step()</span><br><span class="line">    l = loss(net(features), labels)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;epoch <span class="subst">&#123;epoch + <span class="number">1</span>&#125;</span>, loss <span class="subst">&#123;l:f&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><pre><code>epoch 1, loss 0.000177epoch 2, loss 0.000097epoch 3, loss 0.000097</code></pre><p>下面我们比较生成数据集的真实参数和通过有限数据训练获得的模型参数。 要访问参数，我们首先从访问所需的层，然后读取该层的权重和偏置。 正如在从零开始实现中一样，我们估计得到的参数与生成数据的真实参数非常接近。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">w = net[<span class="number">0</span>].weight.data</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;w的估计误差：&#x27;</span>, true_w - w.reshape(true_w.shape))</span><br><span class="line">b = net[<span class="number">0</span>].bias.data</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;b的估计误差：&#x27;</span>, true_b - b)</span><br></pre></td></tr></table></figure><pre><code>w的估计误差： tensor([-0.0003, -0.0004])b的估计误差： tensor([-0.0012])</code></pre><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ul><li><p>我们可以使用PyTorch的高级API更简洁地实现模型。</p></li><li><p>在PyTorch中，模块提供了数据处理工具，模块定义了大量的神经网络层和常见损失函数。datann</p></li><li><p>我们可以通过结尾的方法将参数替换，从而初始化参数。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>线性回归从零开始</title>
      <link href="/2024/04/25/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B/"/>
      <url>/2024/04/25/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="线性回归的从零开始实现"><a href="#线性回归的从零开始实现" class="headerlink" title="线性回归的从零开始实现"></a>线性回归的从零开始实现</h1><p>在了解线性回归的关键思想之后，我们可以开始通过代码来动手实现线性回归了。 在这一节中，我们将从零开始实现整个方法， 包括数据流水线、模型、损失函数和小批量随机梯度下降优化器。 虽然现代的深度学习框架几乎可以自动化地进行所有这些工作，但从零开始实现可以确保我们真正知道自己在做什么。 同时，了解更细致的工作原理将方便我们自定义模型、自定义层或自定义损失函数。 在这一节中，我们将只使用张量和自动求导。 在之后的章节中，我们会充分利用深度学习框架的优势，介绍更简洁的实现方式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> d2l <span class="keyword">import</span> torch <span class="keyword">as</span> d2l</span><br></pre></td></tr></table></figure><h1 id="生成数据集¶"><a href="#生成数据集¶" class="headerlink" title="生成数据集¶"></a>生成数据集¶</h1><p>为了简单起见，我们将根据带有噪声的线性模型构造一个人造数据集。 我们的任务是使用这个有限样本的数据集来恢复这个模型的参数。 我们将使用低维数据，这样可以很容易地将其可视化。 在下面的代码中，我们生成一个包含1000个样本的数据集， 每个样本包含从标准正态分布中采样的2个特征。 我们的合成数据集是一个矩阵$X \in R^{1000*2}$。</p><p>我们使用线性模型参数$w &#x3D; [2, -3.4]^T、b &#x3D; 4.2$和噪声项$\epsilon$生成数据集及其标签：</p><p>$y &#x3D; Xw + b + \epsilon$ (3.2.1)</p><p>$\epsilon$可以视为模型预测和标签时的潜在观测误差。 在这里我们认为标准假设成立，即<br>服从均值为0的正态分布。 为了简化问题，我们将标准差设为0.01。 下面的代码生成合成数据集。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">synthetic_data</span>(<span class="params">w, b, num_examples</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;生成y = Xw + b + 噪声&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 生成特征矩阵X，其中每个特征值服从均值为0，标准差为1的正态分布</span></span><br><span class="line">    <span class="comment"># X的形状是(num_examples, len(w))，即(num_examples, 特征数量)</span></span><br><span class="line">    X = torch.normal(<span class="number">0</span>, <span class="number">1</span>, (num_examples, <span class="built_in">len</span>(w)))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算标签y，y = Xw + b，这里使用矩阵乘法torch.matmul(X, w)计算Xw</span></span><br><span class="line">    y = torch.matmul(X, w) + b</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 向y添加噪声，噪声服从均值为0，标准差为0.01的正态分布</span></span><br><span class="line">    <span class="comment"># 这样模拟真实数据集中的不确定性</span></span><br><span class="line">    y += torch.normal(<span class="number">0</span>, <span class="number">0.01</span>, y.shape)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 返回特征矩阵X和标签向量y，y被重塑为(num_examples, 1)的形状</span></span><br><span class="line">    <span class="keyword">return</span> X, y.reshape((-<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义真实的权重向量w和偏置b</span></span><br><span class="line">true_w = torch.tensor([<span class="number">2</span>, -<span class="number">3.4</span>])</span><br><span class="line">true_b = <span class="number">4.2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用synthetic_data函数生成1000个样本的数据集</span></span><br><span class="line">features, labels = synthetic_data(true_w, true_b, <span class="number">1000</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意，features中的每一行都包含一个二维数据样本， labels中的每一行都包含一维标签值（一个标量）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;feature:&#x27;</span>, features[<span class="number">0</span>], <span class="string">&quot;\nlabel:&quot;</span>, labels[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><pre><code>feature: tensor([ 0.1752, -1.0727]) label: tensor([8.1913])</code></pre><p>通过生成第二个特征features[:, 1]和labels的散点图， 可以直观观察到两者之间的线性关系。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置图表大小。这个函数是d2l库提供的，它会调整图表的大小以适应显示。</span></span><br><span class="line">d2l.set_figsize()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用matplotlib的scatter函数绘制散点图。</span></span><br><span class="line"><span class="comment"># features[:, (1)]选取了特征矩阵的第二列（索引为1），即第二个特征的所有样本值。</span></span><br><span class="line"><span class="comment"># detach().numpy()将PyTorch张量转换为NumPy数组，以便在matplotlib中使用。</span></span><br><span class="line"><span class="comment"># labels.detach().numpy()将标签张量转换为NumPy数组。</span></span><br><span class="line"><span class="comment"># 最后的参数1指定了散点图点的大小。</span></span><br><span class="line">d2l.plt.scatter(features[:, (<span class="number">1</span>)].detach().numpy(), labels.detach().numpy(), <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意：这段代码的最后一行末尾有一个分号&#x27;;&#x27;，这是可选的，用于阻止Python打印出scatter函数的返回值。</span></span><br></pre></td></tr></table></figure><h1 id="读取数据集"><a href="#读取数据集" class="headerlink" title="读取数据集"></a>读取数据集</h1><p>回想一下，训练模型时要对数据集进行遍历，每次抽取一小批量样本，并使用它们来更新我们的模型。 由于这个过程是训练机器学习算法的基础，所以有必要定义一个函数， 该函数能打乱数据集中的样本并以小批量方式获取数据。</p><p>在下面的代码中，我们定义一个data_iter函数， 该函数接收批量大小、特征矩阵和标签向量作为输入，生成大小为batch_size的小批量。 每个小批量包含一组特征和标签。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch  <span class="comment"># 导入PyTorch库</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">data_iter</span>(<span class="params">batch_size, features, labels</span>):</span><br><span class="line">    <span class="comment"># 获取样本总数</span></span><br><span class="line">    num_examples = <span class="built_in">len</span>(features)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建一个列表，包含从0到num_examples - 1的所有索引</span></span><br><span class="line">    indices = <span class="built_in">list</span>(<span class="built_in">range</span>(num_examples))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 打乱索引列表，这样每次迭代时都会以不同的顺序读取数据</span></span><br><span class="line">    random.shuffle(indices)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 迭代整个数据集，每次提取一个批量的样本</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, num_examples, batch_size):</span><br><span class="line">        <span class="comment"># 计算当前批量的结束索引</span></span><br><span class="line">        batch_indices = torch.tensor(</span><br><span class="line">            indices[i: <span class="built_in">min</span>(i + batch_size, num_examples)])</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 使用计算出的索引提取当前批量的特征和标签</span></span><br><span class="line">        <span class="keyword">yield</span> features[batch_indices], labels[batch_indices]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通常，我们利用GPU并行运算的优势，处理合理大小的“小批量”。 每个样本都可以并行地进行模型计算，且每个样本损失函数的梯度也可以被并行计算。 GPU可以在处理几百个样本时，所花费的时间不比处理一个样本时多太多。</p><p>我们直观感受一下小批量运算：读取第一个小批量数据样本并打印。 每个批量的特征维度显示批量大小和输入特征数。 同样的，批量的标签形状与batch_size相等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">batch_size = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> X, y <span class="keyword">in</span> data_iter(batch_size, features, labels):</span><br><span class="line">    <span class="built_in">print</span>(X, <span class="string">&#x27;\n&#x27;</span>, y)</span><br><span class="line">    <span class="keyword">break</span></span><br></pre></td></tr></table></figure><pre><code>tensor([[-3.0643,  1.0533],        [-0.9229,  1.5654],        [-0.0340,  0.0504],        [ 0.5661,  1.9557],        [-0.4642,  0.1759],        [ 0.5983,  1.1317],        [ 0.8255,  0.4834],        [ 1.4149,  0.3229],        [-0.7331,  1.1990],        [-0.6738,  1.0309]])  tensor([[-5.5173],        [-2.9610],        [ 3.9682],        [-1.3140],        [ 2.6727],        [ 1.5492],        [ 4.1854],        [ 5.9360],        [-1.3348],        [-0.6517]])</code></pre><p>当我们运行迭代时，我们会连续地获得不同的小批量，直至遍历完整个数据集。 上面实现的迭代对教学来说很好，但它的执行效率很低，可能会在实际问题上陷入麻烦。 例如，它要求我们将所有数据加载到内存中，并执行大量的随机内存访问。 在深度学习框架中实现的内置迭代器效率要高得多， 它可以处理存储在文件中的数据和数据流提供的数据。</p><h1 id="初始化模型参数"><a href="#初始化模型参数" class="headerlink" title="初始化模型参数"></a>初始化模型参数</h1><p>在我们开始用小批量随机梯度下降优化我们的模型参数之前， 我们需要先有一些参数。 在下面的代码中，我们通过从均值为0、标准差为0.01的正态分布中采样随机数来初始化权重， 并将偏置初始化为0。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">w = torch.normal(<span class="number">0</span>, <span class="number">0.01</span>, size=(<span class="number">2</span>,<span class="number">1</span>), requires_grad=<span class="literal">True</span>)</span><br><span class="line">b = torch.zeros(<span class="number">1</span>, requires_grad=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>在初始化参数之后，我们的任务是更新这些参数，直到这些参数足够拟合我们的数据。 每次更新都需要计算损失函数关于模型参数的梯度。 有了这个梯度，我们就可以向减小损失的方向更新每个参数。 因为手动计算梯度很枯燥而且容易出错，所以没有人会手动计算梯度。 我们使用 2.5节中引入的自动微分来计算梯度。</p><h1 id="定义模型"><a href="#定义模型" class="headerlink" title="定义模型"></a>定义模型</h1><p>接下来，我们必须定义模型，将模型的输入和参数同模型的输出关联起来。 回想一下，要计算线性模型的输出， 我们只需计算输入特征$X$和模型权重$w$的矩阵-向量乘法后加上偏置$b$。 注意，上面的<br>$Xw$是一个向量，而$b$是一个标量。 回想一下 2.1.3节中描述的广播机制： 当我们用一个向量加一个标量时，标量会被加到向量的每个分量上。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">linreg</span>(<span class="params">X, w, b</span>):  <span class="comment">#@save</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;线性回归模型&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> torch.matmul(X, w) + b</span><br></pre></td></tr></table></figure><h1 id="定义损失函数"><a href="#定义损失函数" class="headerlink" title="定义损失函数"></a>定义损失函数</h1><p>因为需要计算损失函数的梯度，所以我们应该先定义损失函数。 这里我们使用 3.1节中描述的平方损失函数。 在实现中，我们需要将真实值y的形状转换为和预测值y_hat的形状相同。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">squared_loss</span>(<span class="params">y_hat, y</span>):  <span class="comment">#@save</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;均方损失&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> (y_hat - y.reshape(y_hat.shape)) ** <span class="number">2</span> / <span class="number">2</span></span><br></pre></td></tr></table></figure><h1 id="定义优化算法"><a href="#定义优化算法" class="headerlink" title="定义优化算法"></a>定义优化算法</h1><p>正如我们在 3.1节中讨论的，线性回归有解析解。 尽管线性回归有解析解，但本书中的其他模型却没有。 这里我们介绍小批量随机梯度下降。</p><p>在每一步中，使用从数据集中随机抽取的一个小批量，然后根据参数计算损失的梯度。 接下来，朝着减少损失的方向更新我们的参数。 下面的函数实现小批量随机梯度下降更新。 该函数接受模型参数集合、学习速率和批量大小作为输入。每 一步更新的大小由学习速率lr决定。 因为我们计算的损失是一个批量样本的总和，所以我们用批量大小（batch_size） 来规范化步长，这样步长大小就不会取决于我们对批量大小的选择。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sgd</span>(<span class="params">params, lr, batch_size</span>):  <span class="comment">#@save</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;小批量随机梯度下降&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 使用with torch.no_grad()确保在更新参数时不会计算梯度</span></span><br><span class="line">    <span class="comment"># 这是因为我们只是在应用已经计算出的梯度，而不需要在更新参数时再次计算梯度</span></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        <span class="comment"># 遍历模型中的每个参数</span></span><br><span class="line">        <span class="keyword">for</span> param <span class="keyword">in</span> params:</span><br><span class="line">            <span class="comment"># 根据梯度下降公式更新参数：</span></span><br><span class="line">            <span class="comment"># param = param - learning_rate * gradient</span></span><br><span class="line">            <span class="comment"># 这里除以batch_size是因为梯度是在一个批量上计算的</span></span><br><span class="line">            <span class="comment"># 所以需要将梯度平均化，以得到每个样本的梯度贡献</span></span><br><span class="line">            param -= lr * param.grad / batch_size</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 清零参数的梯度，为下一次梯度计算做准备</span></span><br><span class="line">            <span class="comment"># 这是因为在PyTorch中，梯度是累加的</span></span><br><span class="line">            <span class="comment"># 如果不清零，下一次计算梯度时，梯度会与上一次的梯度累加</span></span><br><span class="line">            param.grad.zero_()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h1><p>现在我们已经准备好了模型训练所有需要的要素，可以实现主要的训练过程部分了。 理解这段代码至关重要，因为从事深度学习后， 相同的训练过程几乎一遍又一遍地出现。 在每次迭代中，我们读取一小批量训练样本，并通过我们的模型来获得一组预测。 计算完损失后，我们开始反向传播，存储每个参数的梯度。 最后，我们调用优化算法sgd来更新模型参数。</p><p>概括一下，我们将执行以下循环：</p><ul><li><p>初始化参数</p></li><li><p>重复以下训练，直到完成</p></li><li><ul><li>计算梯度$g \leftarrow \partial_{w,b}\frac{1}{|\beta|}\sum_{i\in\beta}l(x^{(i)}, y^{(i)},w,b)$</li><li>更新参数$(w, b) \leftarrow (w, b) - ng$</li></ul></li></ul><p>在每个迭代周期（epoch）中，我们使用data_iter函数遍历整个数据集， 并将训练数据集中所有样本都使用一次（假设样本数能够被批量大小整除）。 这里的迭代周期个数num_epochs和学习率lr都是超参数，分别设为3和0.03。 设置超参数很棘手，需要通过反复试验进行调整。 我们现在忽略这些细节，以后会在 11节中详细介绍</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置学习率为0.03</span></span><br><span class="line">lr = <span class="number">0.03</span></span><br><span class="line"><span class="comment"># 设置训练周期数为3</span></span><br><span class="line">num_epochs = <span class="number">3</span></span><br><span class="line"><span class="comment"># 假设net是之前定义的线性回归模型函数</span></span><br><span class="line">net = linreg</span><br><span class="line"><span class="comment"># 假设loss是之前定义的平方损失函数</span></span><br><span class="line">loss = squared_loss</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练模型</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(num_epochs):</span><br><span class="line">    <span class="comment"># 遍历数据集，data_iter是之前定义的生成小批量数据的函数</span></span><br><span class="line">    <span class="keyword">for</span> X, y <span class="keyword">in</span> data_iter(batch_size, features, labels):</span><br><span class="line">        <span class="comment"># 计算小批量数据X和y的损失</span></span><br><span class="line">        l = loss(net(X, w, b), y)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 因为l是一个(batch_size, 1)形状的向量，我们需要对其所有元素进行求和</span></span><br><span class="line">        <span class="comment"># 以得到一个标量损失值，然后调用backward进行反向传播计算梯度</span></span><br><span class="line">        l.<span class="built_in">sum</span>().backward()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 使用小批量随机梯度下降法(sgd)更新模型的参数w和b</span></span><br><span class="line">        sgd([w, b], lr, batch_size)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 在每个训练周期结束后，评估模型的损失</span></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        <span class="comment"># 计算整个训练集上的损失</span></span><br><span class="line">        train_l = loss(net(features, w, b), labels)</span><br><span class="line">        <span class="comment"># 打印当前周期数和平均损失</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;epoch <span class="subst">&#123;epoch + <span class="number">1</span>&#125;</span>, loss <span class="subst">&#123;<span class="built_in">float</span>(train_l.mean()):f&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>epoch 1, loss 0.038955epoch 2, loss 0.000141epoch 3, loss 0.000049</code></pre><p>因为我们使用的是自己合成的数据集，所以我们知道真正的参数是什么。 因此，我们可以通过比较真实参数和通过训练学到的参数来评估训练的成功程度。 事实上，真实参数和通过训练学到的参数确实非常接近。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;w的估计误差: <span class="subst">&#123;true_w - w.reshape(true_w.shape)&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;b的估计误差: <span class="subst">&#123;true_b - b&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><pre><code>w的估计误差: tensor([0.0003, 0.0002], grad_fn=&lt;SubBackward0&gt;)b的估计误差: tensor([0.0006], grad_fn=&lt;RsubBackward1&gt;)</code></pre><p>注意，我们不应该想当然地认为我们能够完美地求解参数。 在机器学习中，我们通常不太关心恢复真正的参数，而更关心如何高度准确预测参数。 幸运的是，即使是在复杂的优化问题上，随机梯度下降通常也能找到非常好的解。 其中一个原因是，在深度网络中存在许多参数组合能够实现高度精确的预测。</p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
